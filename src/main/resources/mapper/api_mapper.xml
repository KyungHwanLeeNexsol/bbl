<?xml version="1.0" encoding="UTF-8"?> <!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.onedatatech.bs_hdc.main_mapper">
    <select id="select_now_api" resultType="java.util.HashMap">
        select now() as now;
    </select>

    <select id="getPTLessionVouchars" resultType="java.util.HashMap">
        select
            p.idx as productIdx,
            p.name as productName,
            p.description as productDescription, /** 220602추가 **/
            ptid.specialty, /** 220602추가 **/
            p.product_type as productType,
            p.price,
            p.discount,
            p.discount_price as discountPrice,
            p.store_idx as storeIdx,
            s.store_name as storeName,
            p.seller_idx as sellerIdx,
            t.pt_trainer_name as sellerName,
            t.nick_name as sellerNickName, /** 220531추가 **/
            s.address, /** 220531추가 **/
            avg(un.user_satisfaction) as userSatisfaction, /** 220531추가, 220602수정 **/
			pti.image_path as imagePath, /** 220603 추가 **/
            pti.image_file_name as imageFileName /** 220603 추가 **/
        from
            product as p
        left join
            pt_trainer_info_basic as t
        on
            p.seller_idx = t.pt_trainer_idx
        left join
            pt_trainer_info_details as ptid
        on
            t.pt_trainer_idx = ptid.pt_trainer_idx
        left join
            stores_info_basic as s
        on
            p.store_idx = s.store_idx OR t.affilated_center = s.store_idx
        left join
            users_notes as un
        on
            p.idx = un.note_target AND un.note_category = #{noteCategory} /** 220602추가 **/
        left join
			pt_trainer_images as pti
		on
			pti.pt_trainer_idx = ptid.pt_trainer_idx AND pti.main_image_yn = "1" AND pti.image_type = #{imageType} /** 220603 추가 **/
        group by
            p.idx, p.name, p.description, ptid.specialty, p.product_type, p.price, p.discount, p.store_idx, s.store_name, p.seller_idx, t.pt_trainer_name, t.nick_name, s.address, pti.image_path, pti.image_file_name
    </select>

    <select id="getPTLessionVoucharsDetail" resultType="java.util.HashMap">
        select
            p.idx as productIdx,
            p.name as productName,
            p.product_type as productType,
            p.price,
            p.discount,
            p.discount_price as discountPrice,
            p.description,
            p.store_idx as storeIdx,
            s.store_name as storeName,
            p.seller_idx as sellerIdx,
            t.pt_trainer_name as sellerName,
            t.nick_name as sellerNickName, /** 220531추가 **/
            p.registered_date as registeredDate,
            pv.voucher_type as voucherType,
            pv.use_termYN as useTermYN,
            pv.use_term as useTerm,
            avg(un.user_satisfaction) as userSatisfaction /** 220531추가, 220602수정 **/
            /** 사진 정보 추가 예정**/
        from
            product as p
        left join
            pt_trainer_info_basic as t
        on
            p.seller_idx = t.pt_trainer_idx
        left join
            stores_info_basic as s
        on
            p.store_idx = s.store_idx OR t.affilated_center = s.store_idx
        left join
            product_pt_voucher_details as pv
        on
            p.idx = pv.idx
        left join
            users_notes as un
        on
            p.idx = un.note_target AND un.note_category = #{noteCategory}
        where
            p.idx = #{productIdx}
        group by
            p.idx, p.name, p.product_type, p.price, p.discount, p.description, p.store_idx, s.store_name, p.seller_idx, t.pt_trainer_name, t.nick_name, p.registered_date, pv.voucher_type, pv.use_termYN, pv.use_term
    </select>

    <select id="getPTTrainers" resultType="java.util.HashMap">
        select
            p.pt_trainer_idx as PTTrainerIdx,
            p.pt_trainer_name as PTTrainerName,
            p.nick_name as nickName, /** 220531추가 **/
            p.gender,
            p.affilated_center as affilatedCenterIdx,
            s.store_name as affilatedCenterName,
            pti.image_path as imagePath, /** 220603 추가 **/
            pti.image_file_name as imageFileName /** 220603 추가 **/
        from
            pt_trainer_info_basic as p
        left join
            stores_info_basic as s
        on
            p.affilated_center = s.store_idx
        left join
            pt_trainer_info_details as ptid
        on
            p.pt_trainer_idx = ptid.pt_trainer_idx
        left join
			pt_trainer_images as pti
		on
			p.pt_trainer_idx = pti.pt_trainer_idx AND pti.main_image_yn = "1" AND pti.image_type = #{imageType} /** 220603 추가 **/
    </select>

    <select id="getPTTrainerDetail" resultType="java.util.HashMap">
        select
            p.pt_trainer_idx as PTTrainerIdx,
            p.pt_trainer_name as PTTrainerName,
            p.nick_name as nickName, /** 220531추가 **/
            p.gender,
            ROUND((TO_DAYS(NOW()) -  to_days(STR_TO_DATE(p.birth_day, '%Y%m%d'))) / 365 ) as age,
            p.affilated_center as affilatedCenterIdx,
            s.store_name as affilatedCenterName,
            ptid.introduction,
            ptid.specialty, /** 220602추가 **/
            ifnull(ptid.work_experience, 0) as workExperienceCount, /** 220602추가 **/
            ifnull(ptid.award_winning, 0) as awardWinningCount, /** 220602추가 **/
            ifnull(ptid.qualification, 0) as qualificationCount, /** 220602추가 **/
            count(case when pti.pt_trainer_idx = p.pt_trainer_idx AND pti.image_type = #{imageType} then 1 end) as photoCount /** 220628수정 **/
        from
            pt_trainer_info_basic as p
        left join
            stores_info_basic as s
        on
            p.affilated_center = s.store_idx
        left join
            pt_trainer_info_details as ptid
        on
            p.pt_trainer_idx = ptid.pt_trainer_idx
        left join /** 220602추가 **/
            pt_trainer_images as pti
        on
            p.pt_trainer_idx = pti.pt_trainer_idx
        where
            p.pt_trainer_idx = #{PTTrainerIdx}
    </select>

    <select id="getPTTrainerDetail_workExperience" resultType="java.util.HashMap">
        select
            ptwe.start as startDate,
            ptwe.end as endDate,
            ptwe.organization,
            ptwe.role
        from
            pt_trainer_work_experience as ptwe
        where
            ptwe.pt_trainer_idx = #{PTTrainerIdx}
    </select>

    <select id="getPTTrainerDetail_awardWinning" resultType="java.util.HashMap">
        select
            ptaw.year,
            ptaw.competition,
            ptaw.participation,
            ptaw.award_winning as awardWinning
        from
            pt_trainer_award_winning as ptaw
        where
            ptaw.pt_trainer_idx = #{PTTrainerIdx}
    </select>

    <select id="getPTTrainerDetail_qualification" resultType="java.util.HashMap">
        select
            ptq.license_name as licenseName,
            ptq.organization as issuedOrganization,
            ptq.issued_date as issuedDate
        from
            pt_trainer_qualitification as ptq
        where
            ptq.pt_trainer_idx = #{PTTrainerIdx}
    </select>

    <select id="getPTTrainerDetail_photo" resultType="java.util.HashMap">
        select
            pti.iseq as iseq,
            pti.pt_trainer_idx as PTTrainerIdx,
            pti.image_path as imagePath,
            pti.image_file_name as imageFileName,
            pti.main_image_yn as mainImageYN
        from
            pt_trainer_images as pti
        where
            pti.pt_trainer_idx = #{PTTrainerIdx} AND image_type = #{imageType}
    </select>

    <select id="getAffiliatedCenterDetail" resultType="java.util.HashMap">
        SELECT
        	sib.store_idx as storeIdx,
            fgsi.image_path as imagePath,
            fgsi.image_file_name as imageFileName,
            sib.store_name as storeName,
            sib.president_name as presidentName,
            sib.biz_type as bizType,
            sib.biz_topics as bizTopic,
            sib.address,
            sib.service_region as serviceRegion,
            sib.service_local_area as serviceLocalArea,
            sib.main_telephone as mainTelephone,
            sib.person_in_charge as personInCharge,
            sib.contract_number as contractNumber,
            count(case when sib.store_idx = fgsi.store_idx then 1 end) as photoCount
        FROM
        	stores_info_basic as sib
        LEFT JOIN
        	fitness_gym_stores_images as fgsi
        ON
        	sib.store_idx = fgsi.store_idx AND fgsi.main_image_yn = '1'
        WHERE
        	sib.store_idx = #{storeIdx}
        GROUP BY
        	sib.store_idx, fgsi.image_path, fgsi.image_file_name, sib.store_name, sib.president_name,
        	sib.biz_type, sib.biz_topics, sib.address, sib.service_region, sib.service_local_area,
        	sib.main_telephone, sib.person_in_charge, sib.contract_number
    </select>

    <select id="getAffiliatedCenter_photo" resultType="java.util.HashMap">
        SELECT
        	fgsi.iseq,
            fgsi.store_idx as storeIdx,
            fgsi.image_path as imagePath,
            fgsi.image_file_name as imageFileName,
            fgsi.main_image_yn as mainImageYN
        FROM
        	fitness_gym_stores_images as fgsi
        WHERE
        	fgsi.store_idx = #{storeIdx}
    </select>

    <select id="getShoppingItems" resultType="java.util.HashMap">
        select
            usb.product_category as category,
            usb.idx,
            usb.user_idx as userIdx,
            usb.quantity,
            usb.seleted_date as selectedDate,
            usb.product_idx as productIdx,
            p.name as productName,
            p.price,
            p.discount,
            p.discount_price as discountPrice,
            p.store_idx as storeIdx,
            sib.store_name as storeName,
            p.seller_idx as sellerIdx,
            ptib.pt_trainer_name as sellerName,
            ptib.nick_name as sellerNickName /** 220531추가 **/
        from users_shopping_basket as usb
        left join product as p on usb.product_idx = p.idx
        left join stores_info_basic as sib on p.store_idx = sib.store_idx
        left join pt_trainer_info_basic as ptib on p.seller_idx = ptib.pt_trainer_idx
        where user_idx = #{userIdx}
    </select>

    <insert id="addShoppingItems">
        insert into users_shopping_basket (user_idx, product_idx, product_category, quantity)
        values (#{userIdx}, #{productIdx}, #{productCategory}, #{quantity})
    </insert>

    <delete id="deleteShoppingItems">
        delete from users_shopping_basket
        where idx = #{usersShoppingBasketIdx}
    </delete>

    <select id="getUserPick_Products" resultType="java.util.HashMap">
        select
            up.item_category as category,
            p.idx as productIdx,
            p.name as productName,
            p.product_type as productType,
            p.price,
            p.discount,
            p.discount_price as discountPrice,
            p.store_idx as storeIdx,
            sib.store_name as storeName,
            p.seller_idx as sellerIdx,
            ptib.pt_trainer_name as sellerName,
            ptib.nick_name as sellerNickName, /** 220531추가 **/
            sib.address /** 220603추가 **/
        from
            users_pick as up
        left join
            product as p
        on
            up.picked_item = p.idx
        left join
            pt_trainer_info_basic as ptib
        on
            p.seller_idx = ptib.pt_trainer_idx
        left join
            stores_info_basic as sib
        on
            p.store_idx = sib.store_idx OR ptib.affilated_center = sib.store_idx
        where
            up.user_idx = #{userIdx} AND up.item_category = #{category}
    </select>

    <select id="getUserPick_PTTrainers" resultType="java.util.HashMap">
        select
            up.item_category as category,
            ptib.pt_trainer_idx as PTTrainerIdx,
            ptib.pt_trainer_name as PTTrainerName,
            ptib.nick_name as nickName, /** 220531추가 **/
            ptib.gender,
            ptib.affilated_center as affilatedCenterIdx,
            sib.store_name as affilatedCenterName,
            pti.image_path as imagePath,
            pti.image_file_name as imageFileName
        from
            users_pick as up
        left join
            pt_trainer_info_basic as ptib
        on
            ptib.pt_trainer_idx = up.picked_item
        left join
            stores_info_basic as sib
        on
            ptib.affilated_center = sib.store_idx
        left join
            pt_trainer_info_details as ptid
        on
            ptib.pt_trainer_idx = ptid.pt_trainer_idx
        left join
			pt_trainer_images as pti
		on
			ptib.pt_trainer_idx = pti.pt_trainer_idx AND pti.main_image_yn = "1" AND pti.image_type = #{imageType} /** 220603 추가 **/
        where
            up.user_idx = #{userIdx} AND up.item_category = #{category}
    </select>

    <select id="getUserPick_Stores" resultType="java.util.HashMap">
        select
            sib.store_idx as storeIdx,
            sib.store_name as storeName,
            sib.main_telephone as mainTelephone,
            sib.address,
            fgsid.main_photo as mainPhoto
        from
            users_pick as up
        left join
            stores_info_basic as sib
        on
            up.picked_item = sib.store_idx
        left join
            fitness_gym_stores_info_details as fgsid
        on
            fgsid.store_idx = sib.store_idx
        where
            up.user_idx = #{userIdx} AND up.item_category = #{category}
    </select>

    <select id="getUsersPickDetail_Product" resultType="java.util.HashMap">
        select
            p.idx as productIdx,
            p.name as productName,
            p.product_type as productType,
            p.price,
            p.discount,
            p.discount_price as discountPrice,
            p.description,
            p.store_idx as storeIdx,
            s.store_name as storeName,
            p.seller_idx as sellerIdx,
            t.pt_trainer_name as sellerName,
            t.nick_name as sellerNickName, /** 220531추가 **/
            p.registered_date as registeredDate,
            pv.voucher_type as voucherType,
            pv.use_termYN as useTermYN,
            pv.use_term as useTerm,
            avg(un.user_satisfaction) as userSatisfaction /** 220531추가, 220602수정 **/
            /** 사진 정보 추가 예정**/
        from
            product as p
        left join
            pt_trainer_info_basic as t
        on
            p.seller_idx = t.pt_trainer_idx
        left join
            stores_info_basic as s
        on
            p.store_idx = s.store_idx OR t.affilated_center = s.store_idx
        left join
            product_pt_voucher_details as pv
        on
            p.idx = pv.idx
        left join
            users_notes as un
        on
            p.idx = un.note_target AND un.note_category = #{noteCategory}
        where
            p.idx = #{pickedItemIdx}
        group by
            p.idx, p.name, p.product_type, p.price, p.discount, p.description, p.store_idx, s.store_name, p.seller_idx, t.pt_trainer_name, t.nick_name, p.registered_date, pv.voucher_type, pv.use_termYN, pv.use_term
    </select>

    <select id="getUsersPickDetail_PTTrainer" resultType="java.util.HashMap">
        select
            p.pt_trainer_idx as PTTrainerIdx,
            p.pt_trainer_name as PTTrainerName,
            p.nick_name as nickName, /** 220531추가 **/
            p.gender,
            ROUND((TO_DAYS(NOW()) -  to_days(STR_TO_DATE(p.birth_day, '%Y%m%d'))) / 365 ) as age,
            p.affilated_center as affilatedCenterIdx,
            s.store_name as affilatedCenterName,
            ptid.introduction,
            ptid.specialty, /** 220602추가 **/
            ifnull(ptid.work_experience, 0) as workExperienceCount, /** 220602추가 **/
            ifnull(ptid.award_winning, 0) as awardWinningCount, /** 220602추가 **/
            ifnull(ptid.qualification, 0) as qualificationCount, /** 220602추가 **/
            count(case when pti.pt_trainer_idx = p.pt_trainer_idx AND pti.image_type = #{imageType} then 1 end) as photoCount /** 220602추가 **/
        from
            pt_trainer_info_basic as p
        left join
            stores_info_basic as s
        on
            p.affilated_center = s.store_idx
        left join
            pt_trainer_info_details as ptid
        on
            p.pt_trainer_idx = ptid.pt_trainer_idx
        left join /** 220602추가 **/
            pt_trainer_images as pti
        on
            p.pt_trainer_idx = pti.pt_trainer_idx
        where
            p.pt_trainer_idx = #{pickedItemIdx}
    </select>

    <select id="getUsersPickDetail_Store" resultType="java.util.HashMap">
        select
            sib.store_idx as storeIdx,
            sib.store_name as storeName,
            sib.main_telephone as mainTelephone,
            sib.address,
            fgsid.main_photo as mainPhoto,
            fgsid.use_guide as useGuide,
            ifnull(fgsid.biz_hour, 0) as bizHour,
            fgsid.introduction,
            ifnull(fgsid.programs, 0) as programs
        from
            stores_info_basic as sib
        left join
            fitness_gym_stores_info_details as fgsid
        on
            fgsid.store_idx = sib.store_idx
        where
            sib.store_idx = #{pickedItemIdx}
    </select>

    <select id="getStoreBizHours" resultType="java.util.HashMap">
        select
            fgsbh.iseq as iseq,
            fgsbh.store_idx as storeIdx,
            fgsbh.title,
            fgsbh.day_classification as dayClassification,
            fgsbh.open_time as openTime,
            fgsbh.close_time as closeTime
        from
            fitness_gym_stores_biz_hour as fgsbh
        where
            fgsbh.store_idx = #{pickedItemIdx}
    </select>

    <select id="getStorePrograms" resultType="java.util.HashMap">
        select
            fgsp.iseq as iseq,
            fgsp.store_idx as storeIdx,
            fgsp.program_name as programName,
            fgsp.description,
            fgsp.charge
        from
            fitness_gym_stores_program as fgsp
        where
            fgsp.store_idx = #{pickedItemIdx}
    </select>

    <select id="getUsersPicks" resultType="java.util.HashMap">
        select
            *
        from
            users_pick
        where
            item_category = #{category} and picked_item = #{pickedItemIdx} and user_idx = #{userIdx}
    </select>

    <insert id="addUserPick">
        insert into users_pick (user_idx, item_category, picked_item)
        values (#{userIdx}, #{category}, #{pickedItemIdx})
    </insert>

    <delete id="deleteUserPick">
        delete from users_pick
        where item_category = #{category} and picked_item = #{pickedItemIdx} and user_idx = #{userIdx}
    </delete>

    <insert id="insertTransaction">
        <selectKey resultType="int" keyProperty="transactionIdx" order="BEFORE">
            SELECT MAX(idx)+1 from transactions
        </selectKey>
        insert into
            transactions(consumer_idx, consumer_telephone, kind_of_items, total_amount, point_use, billing_amount, billing_method)
        values
        (#{userIdx}, #{userTelephone}, #{kindOfItem}, #{totalAmount}, #{pointUse}, #{billingAmount}, #{billingMethod})
    </insert>

    <insert id="insertTransactionDetail">
        insert into
            transactions_details(transaction_idx, product_category, product_idx, price, quantity, amount, seller_idx, store_idx)
        values (#{transactionIdx}, #{productCategory}, #{productIdx}, #{price}, #{quantity}, #{amount}, #{sellerIdx, jdbcType=INTEGER}, #{storeIdx, jdbcType=INTEGER})
    </insert>

    <select id="getTransactions" resultType="java.util.HashMap">
        select
            t.idx as transactionIdx,
            p.idx as productIdx,
            p.name as productName,
            ptib.pt_trainer_name as PTTrainerName, /** 220616 추가 **/
            ptib.nick_name as nickName, /** 220616 추가 **/
            sib.store_name as storeName, /** 220616 추가 **/
            sib.address as storeAddress, /** 220616 추가 **/
            td.quantity, /** 220616 추가 **/
            td.price, /** 220616 추가 **/
            td.amount, /** 220616 추가 **/
            t.point_use as pointUse, /** 220616 추가 **/
            t.transaction_date as transactionDate,
            p.product_type as productType,
            p.seller_idx as sellerIdx,
            p.store_idx as storeIdx,
            t.billing_date as billingDate,
            t.billing_method as billingMethod,
            t.billingyn as billingYN, /** 결제 여부 220531 추가 **/
            t.cancelyn as cancelYN /** 취소 여부 220531 추가 **/
        from
            transactions as t
        left join
            transactions_details as td
        on
            t.idx = td.transaction_idx
        left join
            product as p
        on
            p.idx = td.product_idx
		left join
			pt_trainer_info_basic as ptib
		on
			ptib.pt_trainer_idx = td.seller_idx
		left join
			stores_info_basic as sib
		on
			ptib.affilated_center = sib.store_idx
        where
            consumer_idx = #{userIdx}
    </select>

    <select id="getTransactionDetail" resultType="java.util.HashMap">
        select
            t.idx as transactionIdx,
            t.total_amount as totalAmount,
            t.point_use as pointUse,
            t.billing_amount as billingAmount,
            t.billing_method as billingMethod,
            t.kind_of_items as kindOfItems,
            t.billingyn as billingYN,
            t.cancelyn as cancelYN,
            t.refundyn as refundYN, /** 220616 추가 **/
            t.refund_date as refundDate /** 220616 추가 **/
        from
            transactions as t
        where
            t.idx = #{transactionIdx}
    </select>

    <select id="getTransactionDetail_product" resultType="java.util.HashMap">
        select
            p.idx as productIdx,
            p.name as productName,
            ptib.pt_trainer_name as sellerName,
            ptib.nick_name as sellerNickName,
            sib.store_name as storeName,
            td.price,
            td.quantity,
            td.amount
        from
            transactions_details as td
        left join
            product as p
        on
            td.product_idx = p.idx
        left join
            pt_trainer_info_basic as ptib
        on
            ptib.pt_trainer_idx = p.seller_idx
        left join
            stores_info_basic as sib
        on
            sib.store_idx = p.store_idx OR ptib.affilated_center = sib.store_idx
        where
            td.transaction_idx = #{transactionIdx}
    </select>

    <select id="getCancelYN" resultType="INTEGER">
        select
            cancelyn
        from
            transactions
        where
            idx = #{transactionIdx}
    </select>

    <update id="updateCancel" parameterType="java.util.HashMap">
        update transactions
        set cancelyn = "1", cancel_date = now()
        where idx = #{transactionIdx}
    </update>

    <insert id="setCancelReason">
        insert into
        transactions_cancel_reason(
        transaction_idx,
        reason_category,
        reason_detail
        )
        values(
        #{transactionIdx},
        #{cancelReason},
        #{reasonDetail}
        )
    </insert>

    <select id="getBillingYN" resultType="INTEGER">
        select
            billingyn
        from
            transactions
        where
            idx = #{transactionIdx}
    </select>

    <update id="updateRefund" parameterType="java.util.HashMap">
        update transactions
        set refundyn = "1", refund_date = now()
        where idx = #{transactionIdx}
    </update>
    
    <select id="getTransactionIdx" resultType="java.util.HashMap">
        select distinct transaction_idx as transactionIdx
        from transactions_details
        where seller_idx = #{trainerIdx}
    </select>

    <select id="getConsumerIdx" resultType="INTEGER">
        select
            consumer_idx as consumerIdx
        from
            transactions as t
        where
            t.idx = #{transactionIdx} AND billingyn = "1" AND cancelyn = "0"
    </select>

    <select id="getCancelTransactions" resultType="java.util.HashMap">
        select
            t.idx as transactionIdx,
            p.idx as productIdx,
            p.name as productName,
            ptib.pt_trainer_name as PTTrainerName, /** 220616 추가 **/
            ptib.nick_name as nickName, /** 220616 추가 **/
            sib.store_name as storeName, /** 220616 추가 **/
            sib.address as storeAddress, /** 220616 추가 **/
            td.quantity, /** 220616 추가 **/
            td.price, /** 220616 추가 **/
            td.amount, /** 220616 추가 **/
            t.point_use as pointUse, /** 220616 추가 **/
            t.transaction_date as transactionDate,
            p.product_type as productType,
            p.seller_idx as sellerIdx,
            p.store_idx as storeIdx,
            t.billing_date as billingDate,
            t.billing_method as billingMethod,
            t.billingyn as billingYN, /** 결제 여부 220531 추가 **/
            t.cancelyn as cancelYN, /** 취소 여부 220531 추가 **/
            t.refundyn as refundYN, /** 220616 추가 **/
            t.refund_date as refundDate /** 220616 추가 **/
        from
            transactions as t
        left join
            transactions_details as td
        on
            t.idx = td.transaction_idx
        left join
            product as p
        on
            p.idx = td.product_idx
		left join
			pt_trainer_info_basic as ptib
		on
			ptib.pt_trainer_idx = td.seller_idx
		left join
			stores_info_basic as sib
		on
			ptib.affilated_center = sib.store_idx
        where
            consumer_idx = #{userIdx} AND cancelyn = "1"
    </select>

    <insert id="addUserPTRecords">
        <selectKey resultType="int" keyProperty="recordIdx" order="AFTER">
            SELECT MAX(idx) from users_pt_records
        </selectKey>
        insert into users_pt_records(user_idx, date, exercise_category, recorded_by)
        values (#{userIdx}, #{date}, #{exerciseCategory}, "0")
    </insert>
    
    <insert id="addUserPTContents">
        insert into user_pt_contents(record_idx, exercise_type, exercise_name, exercise_details)
        values (#{recordIdx}, #{exerciseType}, #{exerciseName}, #{exerciseDetails})
    </insert>

    <select id="getExerciseCount" resultType="INTEGER">
        select count(record_idx)
        from user_pt_contents
        where record_idx = #{recordIdx}
    </select>

    <update id="setUserPTRecordsExerciseCount" parameterType="java.util.HashMap">
        update users_pt_records
        set exercise_count = #{exerciseCount}
        where idx = #{recordIdx}
    </update>

    <select id="getUserPTRecords" resultType="java.util.HashMap">
    select
        upr.idx as recordIdx,
        upr.date,
        upr.exercise_category as exerciseCategory,
        upr.exercise_count as exerciseCount,
        upc.exercise_type as exerciseType,
        upc.exercise_name as exerciseName,
        upc.exercise_details as exerciseDetails
    from
        users_pt_records as upr
    left join
        user_pt_contents as upc
    on
        upr.idx = upc.record_idx
    where
        upr.user_idx = #{userIdx} and upr.recorded_by = "0"
    </select>

    <delete id="deleteUserPTRecord">
    delete from upr, upc
        using users_pt_records as upr
        left join user_pt_contents as upc
        on upr.idx = upc.record_idx
    where upr.idx = #{recordIdx}
    </delete>

    <select id="getUserPTRecordsWithTrainer" resultType="java.util.HashMap">
        select
            upr.idx as recordIdx,
            upr.pt_trainer_idx as PTTrainerIdx,
            ptib.pt_trainer_name as PTTrainerName,
            ptib.nick_name as nickName,
            upr.date,
            upr.start_time as startTime,
            upr.end_time as endTime,
            upr.exercise_category as exerciseCategory,
            upr.exercise_count as exerciseCount,
            upc.exercise_type as exerciseType,
            upc.exercise_name as exerciseName,
            upc.exercise_details as exerciseDetails
        from
            users_pt_records as upr
        left join
            user_pt_contents as upc
        on
            upr.idx = upc.record_idx
        left join
            pt_trainer_info_basic as ptib
        on
            upr.pt_trainer_idx = ptib.pt_trainer_idx
        where
            upr.user_idx = #{userIdx} and upr.recorded_by = "1"
    </select>

    <select id="checkedUnreadMessage" resultType="INTEGER">
        select count(case when received_date_time is null then 'null' else received_date_time end) as nullCount
        from messages
        where
            receiver_type = #{IDType} AND receiver_idx = #{userIdx}
            AND NOT (del_by_sender = "1" OR del_by_receiver = "1") AND received_date_time is null
    </select>

    <select id="getMessages" resultType="java.util.HashMap">
        select
        	msg.idx as messageIdx,
            msg.related_message as relatedMessage,
            msg.title as messageTitle,
            msg.content as messageContent,
            msg.sender_type as senderType,
            msg.sender_idx as senderIdx,
            msg.send_date_time as sendDateTime,
            msg.received_date_time as receivedDateTime,
            msg.typeIdx as typeIdx,
            msg.etc as etc
        from
        	messages as msg
        where
            (receiver_type = #{IDType} AND receiver_idx = #{userIdx})
            OR (sender_type = #{IDType} ANd sender_idx = #{userIdx}) AND message_type = #{messageType}
            AND NOT (del_by_sender = "1" OR del_by_receiver = "1")
    </select>

    <select id="getMessagesDetail" resultType="java.util.HashMap">
        select
            ptps.idx as PTScheduleIdx,
        	msg.idx as messageIdx,
            msg.related_message as relatedMessage,
            msg.sender_idx as senderIdx,
            ptib.pt_trainer_name as senderName,
            ptib.nick_name as senderNickName,
            ptps.lesson_date as lessonDate,
            ptps.start_ampm as startAmPm,
            ptps.lesson_start_time as lessonStartTime,
            ptps.end_ampm as endAmPm,
            ptps.lesson_end_time as lessonEndTime
        from
        	messages as msg
        left join
        	pt_trainers_pt_schedule as ptps
        on
        	msg.typeIdx = ptps.idx
        left join
        	pt_trainer_info_basic as ptib
        on
        	msg.sender_idx = ptib.pt_trainer_idx
        where
        	msg.idx = #{messageIdx};
    </select>

    <update id="setReceivedDate" parameterType="java.util.HashMap">
        update messages
        set received_date_time = now()
        where idx = #{messageIdx}
    </update>

    <update id="setScheduleConfirmed" parameterType="java.util.HashMap">
        update pt_trainers_pt_schedule
        set confirmed = #{confirmed}
        where idx = #{PTScheduleIdx}
    </update>
    
    <insert id="sendScheduleConfirmed">
        insert into messages(
            related_message,
            sender_idx,
            sender_type,
            receiver_idx,
            receiver_type,
            title, content,
            send_date_time,
            message_type,
            typeIdx)
        values (
            #{messageIdx},
            #{userIdx},
            #{senderType},
            #{receiverIdx},
            #{receiverType},
            #{title},
            #{content},
            now(),
            #{messageType},
            #{PTScheduleIdx})
    </insert>

    <select id="checkId" resultType="java.util.HashMap">
        select id, idx
        from users
        where id = #{email}
    </select>

    <insert id="registerUser">
        <selectKey resultType="int" keyProperty="userIdx" order="AFTER">
            SELECT MAX(idx) from users
        </selectKey>
        insert into users(id)
        values (#{email})
    </insert>

    <insert id="registerUser_authentication">
        insert into users_authentication(user_idx, cert_type, password)
        values (#{userIdx}, #{certType}, #{password})
    </insert>

    <insert id="registerUser_info">
        insert into
            users_info(
                user_idx,
                user_name,
                nick_name,
                birth_day,
                gender,
                eldas,
                registered_date,
                region,
                local_area,
                telephone,
                marketingyn,
                numof_interest,
                user_img_idx)
        values (
                #{userIdx},
                #{name},
                #{nickName},
                #{birthYYYYMMDD},
                #{gender},
                #{elDas},
                now(),
                #{region},
                #{localArea},
                #{telephone},
                #{marketingYN},
                "0",
                #{imgIdx})
    </insert>

    <update id="setNumOfInterest" parameterType="java.util.HashMap">
        update users_info
        set numof_interest = #{numOfInterest}
        where user_idx = #{userIdx}
    </update>

    <insert id="setInterests">
        insert into users_interests(user_idx, interest_code)
        values (#{userIdx}, #{interestCode})
    </insert>

    <select id="getInterestsCount" resultType="INTEGER">
        select count(interest_code)
        from users_interests
        where user_idx = #{userIdx}
    </select>

    <select id="getInterestCode" resultType="java.util.HashMap">
        select interest_code
        from users_interests
        where user_idx = #{userIdx} AND interest_code = #{interestCode}
    </select>

    <select id="getInterests" resultType="java.util.HashMap">
        SELECT
        	iseq,
            user_idx as userIdx,
            interest_code as interestCode
        FROM
        	users_interests
        WHERE
        	user_idx = #{userIdx}
    </select>

    <delete id="delInterestCode">
        delete from users_interests
        where user_idx = #{userIdx} AND NOT interest_code IN
        <foreach collection="interests" item="item" open="(" close=")" separator=",">
            #{item.interestCode}
        </foreach>
    </delete>

    <select id="checkPw" resultType="java.util.HashMap">
        select *
        from users_authentication
        where user_idx = #{userIdx} AND password = #{password}
    </select>
    
    <update id="updateLastAccess" parameterType="java.util.HashMap">
        update users
        set last_access = now()
        where idx = #{userIdx}
    </update>

    <select id="getUserIdx" resultType="java.util.HashMap">
        SELECT
        	u.idx as userIdx
        FROM
        	users as u
        LEFT jOIN
        	users_authentication as ua
        ON
        	u.idx = ua.user_idx
        WHERE
        	u.id = #{email} AND ua.password = #{password}
    </select>

    <select id="getUsersInfo" resultType="java.util.HashMap">
        SELECT
        	u.idx as userIdx,
            u.id as userId,
            u.last_access as lastAccess,
            ua.cert_type as certType,
            ua.password as userPw,
            ui.user_name as userName,
            ui.nick_name as userNickName,
            ui.birth_day as birthDay,
            ui.gender,
            ui.eldas,
            ui.registered_date as registerdDate,
            ui.region,
            ui.local_area as localArea,
            ui.telephone,
            ui.marketingyn as marketingYN,
            ui.numof_interest as numOfInterest
        FROM
        	users as u
        LEFT JOIN
        	users_authentication as ua
        ON
        	u.idx = ua.user_idx
        LEFT JOIN
        	users_info as ui
        ON
        	u.idx = ui.user_idx
        WHERE
        	u.idx = #{userIdx}
    </select>

    <select id="getUsersNotes" resultType="java.util.HashMap">
        SELECT
            un.idx as noteIdx,
            un.note_category as noteCategory,
            un.writer as writerIdx,
            ui.user_name as writerName,
            ui.nick_name as writerNickName,
            un.reg_date as regDate,
            un.update_date as updateDate,
            un.user_satisfaction as userSatisfaction,
            un.hashtag,
            un.content,
            un.like_count as likeCount,
            un.reply_count as replyCount,
            un.photo_count as photoCount
        FROM
            users_notes as un
        LEFT JOIN
            users_info as ui
        ON
            un.writer = ui.user_idx
        WHERE
            note_category = "2" OR note_category = "3" AND un.exposeyn = "1"
    </select>

    <select id="getImagesInfo" resultType="java.util.HashMap">
        SELECT
        	afm.iseq,
            afm.image_path as imagePath,
            afm.image_file_name as imageFileName,
            afm.main_image_yn as mainImageYN,
            afm.expose_yn as exposeYN
        FROM
        	attached_file_management as afm
        WHERE
        	category = #{photoCategory} AND target_idx = #{postIdx} AND afm.expose_yn = '1'
    </select>

    <select id="getFreeTalks" resultType="java.util.HashMap">
        SELECT
            ft.idx as freeTalkIdx,
            ft.photo_count as photoCount,
            ft.title,
            ft.writer as writerIdx,
            ft.writer_name as writerName,
            ui.nick_name as writerNickName,
            ft.reg_date as regDate,
            ft.last_updated as updateDate,
            ft.like_count as likeCount,
            ft.reply_count as replyCount
        FROM
            free_talks as ft
        JOIN
            users_info as ui
        ON
            ft.writer = ui.user_idx
        WHERE
            ft.exposeyn = '1'
    </select>

    <select id="getUsersNotesDetail" resultType="java.util.HashMap">
        SELECT
            un.idx as noteIdx,
            un.writer as writerIdx,
            ui.user_name as writerName,
            ui.nick_name as writerNickName,
            un.reg_date as regDate,
            un.update_date as updateDate,
            un.user_satisfaction as userSatisfaction,
            un.hashtag,
            un.content,
            un.like_count as likeCount,
            un.reply_count as replyCount,
            un.photo_count as photoCount
        FROM
            users_notes as un
        LEFT JOIN
            users_info as ui
        ON
            un.writer = ui.user_idx
        WHERE
            un.idx = #{noteIdx}
    </select>

    <select id="getFreeTalkDetail" resultType="java.util.HashMap">
        SELECT
        	ft.idx as freeTalkIdx,
            ft.title,
            ft.writer as writerIdx,
            ft.writer_name as writerName,
            ui.nick_name as writerNickName,
            ft.reg_date as regDate,
            ft.last_updated as updateDate,
            ft.photo_count as photoCount,
            ft.content,
            ft.like_count as likeCount,
            ft.reply_count as replyCount
        FROM
        	free_talks as ft
        LEFT JOIN
        	users_info as ui
        ON
        	ft.writer = ui.user_idx
        WHERE
        	ft.idx = #{freeTalkIdx}
    </select>

    <select id="getNotesReplies" resultType="java.util.HashMap">
        select
            re.iseq as replyIdx,
            ui.user_img_idx as userImgIdx,
            img.image_path as imagePath,
            img.image_file_name as imageFileName,
            re.user_idx as writerIdx,
            ui.user_name as writerName,
            ui.nick_name as writerNickName,
            re.reg_date as regDate,
            re.update_date as updateDate,
            re.content,
            re.hidden_yn as hiddenYN
        from
            reply as re
        left join
            users_info as ui
        on
            ui.user_idx = re.user_idx
        left join
        	users_images as img
        on
        	ui.user_img_idx = img.iseq
        where
        	category = #{replyCategory} AND target_idx = #{postIdx} AND del_yn = '0'
    </select>

    <insert id="writeReview">
        <selectKey resultType="int" keyProperty="postIdx" order="AFTER">
            SELECT MAX(idx) from users_notes
        </selectKey>
        INSERT INTO users_notes
        (
		    note_category,
            note_target,
            user_satisfaction,
            use_start_date,
            use_end_date,
            content,
            hashtag,
            writer,
            reg_date
	    )
        VALUES
        (
	        #{noteCategory},
            #{targetIdx},
            #{userSatisfaction},
            #{useStartDate},
            #{useEndDate},
            #{content},
            #{hashtag},
            #{userIdx},
            now()
        )
    </insert>

    <update id="updateReview" parameterType="java.util.HashMap">
        update
            users_notes
        set
            note_target = #{targetIdx},
            user_satisfaction = #{userSatisfaction},
            use_start_date = #{useStartDate},
            use_end_date = #{useEndDate},
            content = #{content},
            hashtag = #{hashtag},
            update_date = now()
        where
            idx = #{postIdx}
    </update>

    <insert id="writeFreeTalk">
        <selectKey resultType="int" keyProperty="postIdx" order="AFTER">
            SELECT MAX(idx) from free_talks
        </selectKey>
        INSERT INTO free_talks
        (
            title,
            content,
            writer,
            writer_name,
            reg_date
        )
        VALUES
        (
            #{title},
            #{content},
            #{writerIdx},
            #{writerName},
            now()
        );
    </insert>

    <update id="updateFreeTalk" parameterType="java.util.HashMap">
        update
            free_talks
        set
            title = #{title},
            content = #{content},
            last_updated = now()
        where
            idx = #{postIdx}
    </update>

    <insert id="boardUpload" parameterType="java.util.List">
        INSERT INTO
            attached_file_management(
                image_file_name,
                image_path,
                category,
                target_idx,
                main_image_yn,
                expose_yn
            )
        VALUES
            (
                #{filename},
                #{fileurl},
                #{category},
                #{postIdx},
                '0',
                #{exposeYN}
            )
    </insert>

    <update id="updateBoardFile" parameterType="java.util.HashMap">
        update
            attached_file_management
        set
            target_idx = '0'
        where
            target_idx = #{postIdx} AND category = #{category}
    </update>

    <select id="getPhotoCount" resultType="INTEGER">
        SELECT count(*)
        FROM attached_file_management
        WHERE target_idx = #{postIdx} AND category = #{category}
    </select>

    <update id="updateNotesPhotoCount" parameterType="java.util.HashMap">
        update users_notes
        set photo_count = #{photoCount}
        where idx = #{postIdx}
    </update>

    <update id="updateFreeTalksPhotoCount" parameterType="java.util.HashMap">
         update free_talks
         set photo_count = #{photoCount}
         where idx = #{postIdx}
       </update>

    <select id="getPTTrainersPTUsers" resultType="java.util.HashMap">
        SELECT
        	ptpu.pt_trainer_idx as PTTrainerIdx,
        	ptpu.user_idx as userIdx,
        	ptpu.date_start as dateStart,
        	ptpu.date_end as dateEnd,
            ptpu.product_idx as productIdx,
            p.seller_idx as PTTrainerIdx,
            ptib.pt_trainer_name as PTTrainerName,
            ptib.nick_name as nickName,
            ptib.affilated_center as affilatedCenter,
        	sib.store_name as storeName
        FROM
        	pt_trainer_pt_users as ptpu
        LEFT JOIN
        	product as p
        ON
        	ptpu.product_idx = p.idx
        LEFT JOIN
        	pt_trainer_info_basic as ptib
        ON
        	p.seller_idx = ptib.pt_trainer_idx
        LEFT JOIN
        	stores_info_basic as sib
        ON
        	sib.store_idx = ptib.affilated_center
        WHERE
        	ptpu.user_idx = #{userIdx}
    </select>

    <update id="deleteNote">
        update users_notes
        set exposeyn = "0"
        where idx = #{noteIdx}
    </update>

    <update id="deleteFreeTalk">
        update free_talks
        set exposeyn = "0"
        where idx = #{freeTalkIdx}
    </update>

    <insert id="writeReply">
        <selectKey resultType="int" keyProperty="replyCount" order="AFTER">
                SELECT count(*) from reply where target_idx = #{targetIdx} AND category = #{category}
        </selectKey>
        INSERT INTO reply (category, target_idx, user_idx, content, reg_date, hidden_yn)
        VALUE (#{category}, #{targetIdx}, #{userIdx}, #{content}, now(), #{hiddenYN});
    </insert>

    <update id="updateReply">
        UPDATE
            reply
        SET
            content = #{content},
            update_date = now(),
            hidden_yn = #{hiddenYN}
        WHERE
            iseq = #{replyIdx};
    </update>

    <update id="deleteReply">
        UPDATE
            reply
        SET
            del_yn = '1'
        WHERE
            iseq = #{replyIdx};
    </update>

    <update id="updateNotesReplyCount" parameterType="java.util.HashMap">
        update users_notes
        set reply_count = #{replyCount}
        where idx = #{targetIdx}
    </update>

    <update id="updateFreeTalksReplyCount" parameterType="java.util.HashMap">
        update free_talks
        set reply_count = #{replyCount}
        where idx = #{targetIdx}
    </update>

    <insert id="likePosts">
        <selectKey resultType="int" keyProperty="likeCount" order="AFTER">
            SELECT count(*) from bbldb.like where target_idx = #{targetIdx} AND category = #{category}
        </selectKey>
        INSERT INTO bbldb.like (category, target_idx, user_idx)
        VALUE (#{category}, #{targetIdx}, #{userIdx});
    </insert>

    <delete id="deleteLikePosts">
        delete from bbldb.like
        where category = #{category} AND target_idx = #{targetIdx} AND user_idx = #{userIdx}
    </delete>

    <select id="getLikeCount" resultType="INTEGER">
        SELECT count(*)
        FROM bbldb.like
        WHERE target_idx = #{targetidx} AND category = #{category}
    </select>

    <update id="updateNotesLikeCount" parameterType="java.util.HashMap">
        update users_notes
        set like_count = #{likeCount}
        where idx = #{targetIdx}
    </update>

    <update id="updateFreeTalksLikeCount" parameterType="java.util.HashMap">
        update free_talks
        set like_count = #{likeCount}
        where idx = #{targetIdx}
    </update>

    <select id="getUsersLikes" resultType="java.util.HashMap">
        SELECT *
        FROM bbldb.like
        WHERE user_idx = #{userIdx} AND target_idx = #{targetIdx} AND category = #{category}
    </select>

    <select id="getUserLikesFreeTalks" resultType="java.util.HashMap">
        SELECT
        	l.iseq,
        	ft.idx as freeTalkIdx,
        	ft.photo_count as photoCount,
        	afm.image_path as imagePath,
        	afm.image_file_name as imageFileName,
        	ft.title,
        	ft.writer as writerIdx,
        	ft.writer_name as writerName,
        	ui.nick_name as writerNickName,
        	ft.reg_date as regDate,
        	ft.last_updated as updateDate,
        	ft.like_count as likeCount,
        	ft.reply_count as replyCount
        FROM
        	bbldb.like as l
        LEFT JOIN
        	free_talks as ft
        ON
        	ft.idx = l.target_idx
        LEFT JOIN
        	users_info as ui
        ON
        	ft.writer = ui.user_idx
        LEFT JOIN
        	attached_file_management as afm
        ON
        	ft.idx = afm.target_idx AND afm.category = 2 AND afm.main_image_yn = 1
        WHERE
        	l.user_idx = #{userIdx} AND l.category = #{category}
    </select>

    <select id="getUserLikesNotes" resultType="java.util.HashMap">
        SELECT
        	l.iseq,
        	un.idx as noteIdx,
        	un.note_category as noteCategory,
        	un.writer as writerIdx,
        	ui.user_name as writerName,
        	ui.nick_name as writerNickName,
        	un.reg_date as regDate,
        	un.update_date as updateDate,
        	un.user_satisfaction as userSatisfaction,
        	afm.image_path as imagePath,
        	afm.image_file_name as imageFileName,
        	un.hashtag,
        	un.content,
        	un.like_count as likeCount,
        	un.reply_count as replyCount,
        	un.photo_count as photoCount
        FROM
        	bbldb.like as l
        LEFT JOIN
        	users_notes as un
        ON
        	l.target_idx = un.idx
        LEFT JOIN
        	users_info as ui
        ON
        	un.writer = ui.user_idx
        LEFT JOIN
        	attached_file_management as afm
        ON
        	un.idx = afm.target_idx AND afm.category = '1'
        WHERE
        	l.user_idx = #{userIdx} AND l.category = #{category}
    </select>

    <select id="getUserWriteFreeTalks" resultType="java.util.HashMap">
        SELECT
            ft.idx as freeTalkIdx,
            afm.image_path as imagePath,
            afm.image_file_name as imageFileName,
            ft.title,
            ft.writer as writerIdx,
            ft.writer_name as writerName,
            ui.nick_name as writerNickName,
            ft.reg_date as regDate,
            ft.last_updated as updateDate,
            ft.reply_count as replyCount,
            ft.like_count as likeCount,
            ft.photo_count as photoCount
        FROM
            free_talks as ft
        LEFT JOIN
            attached_file_management as afm
        ON
            afm.target_idx = ft.idx AND afm.category = "2" AND afm.main_image_yn = 1
        LEFT JOIN
            users_info as ui
        ON
            ui.user_idx = ft.writer
        WHERE
            ft.writer = #{userIdx};
    </select>

    <select id="getUserWriteNotes" resultType="java.util.HashMap">
        SELECT
        	un.idx as noteIdx,
            un.note_category as noteCategory,
        	un.writer as writerIdx,
            ui.user_name as writerName,
            ui.nick_name as writerNickName,
            un.reg_date as regDate,
            un.update_date as updateDate,
            un.user_satisfaction as userSatisfaction,
            afm.image_path as imagePath,
            afm.image_file_name as imageFileName,
            un.hashtag,
            un.content,
            un.like_count as likeCount,
            un.reply_count as replyCount,
            un.photo_count as photoCount
        FROM
        	users_notes as un
        LEFT JOIN
        	users_info as ui
        ON
        	ui.user_idx = un.writer
        LEFT JOIN
        	attached_file_management as afm
        ON
        	afm.target_idx = un.idx AND afm.category = "1"
        WHERE
        	writer = #{userIdx}
    </select>

    <select id="getUserWriteReply" resultType="java.util.HashMap">
        SELECT
        	re.iseq,
            re.category as boardCategory,
            re.target_idx as targetIdx,
            re.user_idx as writerIdx,
            ui.user_name as writerName,
            ui.nick_name as writerNickName,
            re.content,
            re.reg_date as regDate,
            re.update_date as updateDate,
            re.hidden_yn as hiddenYN
        FROM
        	reply as re
        LEFT JOIN
        	users_info as ui
        ON
        	re.user_idx = ui.user_idx
        WHERE
        	re.user_idx = #{userIdx} AND re.del_yn = "0"
    </select>

    <insert id="userProfileImgUpload" parameterType="java.util.HashMap">
        <selectKey resultType="int" keyProperty="userImgIdx" order="BEFORE">
            SELECT MAX(iseq)+1 from users_images
        </selectKey>
        INSERT INTO
            users_images(
                image_file_name,
                image_path
            )
        VALUES
            (
                #{filename},
                #{fileurl}
            )
    </insert>

    <update id="modifyUserImgIdx" parameterType="java.util.HashMap">
        update users_info
        set user_img_idx = #{userImgIdx}, default_img_yn = #{defaultImg}
        where user_idx = #{userIdx}
    </update>

    <update id="modifyUserNickname" parameterType="java.util.HashMap">
        update users_info
        set nick_name = #{nickName}
        where user_idx = #{userIdx}
    </update>

    <update id="modifyUserTelephone" parameterType="java.util.HashMap">
        update users_info
        set telephone = #{telephone}
        where user_idx = #{userIdx}
    </update>

    <update id="modifyUserPassword" parameterType="java.util.HashMap">
        update users_authentication
        set password = #{newPassword}
        where user_idx = #{userIdx}
    </update>

    <insert id="writeInquiries">
        INSERT INTO
            inquiries(
                title,
                content,
                writer,
                writer_name,
                reg_date,
                processing_status
            )
        VALUES
            (
                #{title},
                #{content},
                #{userIdx},
                #{writerName},
                now(),
                "1"
            )
    </insert>

    <select id="getInquiriesList" resultType="java.util.HashMap">
        SELECT
            idx,
            writer_name as writerName,
            title,
            reg_date as regDate,
            processing_status as processingStatus
        FROM
            inquiries
        WHERE
            writer = #{userIdx}
    </select>

    <select id="getAnswersToInquiries" resultType="java.util.HashMap">
        SELECT
            idx,
            content,
            reg_date as regDate
        FROM
            answers_to_inquiries
        WHERE
            inquiries_idx = #{inquiriesIdx}
    </select>

    <select id="getNotices" resultType="java.util.HashMap">
        SELECT
            idx,
            title,
            reg_date as regDate,
            last_updated as lastUpdated,
            writer,
            set_period as setPeriod,
            notice_start as noticeStart,
            notice_end as noticeEnd
        FROM
            notice
        WHERE
            noticeyn ='1'
    </select>

    <insert id="insertDeletedUsers" parameterType="java.util.HashMap">
        <selectKey resultType="int" keyProperty="delUserIseq" order="AFTER">
            SELECT MAX(iseq) from deleted_users
        </selectKey>
        INSERT INTO deleted_users(user_idx, id, last_access)
        (SELECT idx, id, last_access FROM users WHERE idx = #{userIdx})
    </insert>

    <update id="updateDeletedUsers" parameterType="java.util.HashMap">
        update deleted_users
        set deleted_reason = #{deletedReason}, reason_detail = #{reasonDetail}, deleted_date = now()
        where iseq = #{delUserIseq}
    </update>

    <!--  데이터 삭제 쿼리 작성부분  -->


    <delete id="deletedUsers">
        DELETE FROM users
        WHERE idx = #{userIdx};
    </delete>
</mapper>