<?xml version="1.0" encoding="UTF-8"?> <!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.onedatatech.bs_hdc.main_mapper">
    <select id="select_now_api" resultType="java.util.HashMap">
        select now() as now;
    </select>

    <select id="getPTLessionVouchars" resultType="java.util.HashMap">
        select
            p.idx as productIdx,
            p.name as productName,
            p.description as productDescription, /** 220602추가 **/
            ptid.specialty, /** 220602추가 **/
            p.product_type as productType,
            p.price,
            p.discount,
            p.store_idx as storeIdx,
            s.store_name as storeName,
            p.seller_idx as sellerIdx,
            t.pt_trainer_name as sellerName,
            t.nick_name as sellerNickName, /** 220531추가 **/
            s.address, /** 220531추가 **/
            avg(un.user_satisfaction) as userSatisfaction, /** 220531추가, 220602수정 **/
			pti.image_path as imagePath, /** 220603 추가 **/
            pti.image_file_name as imageFileName /** 220603 추가 **/
        from
            product as p
        left join
            pt_trainer_info_basic as t
        on
            p.seller_idx = t.pt_trainer_idx
        left join
            pt_trainer_info_details as ptid
        on
            t.pt_trainer_idx = ptid.pt_trainer_idx
        left join
            stores_info_basic as s
        on
            p.store_idx = s.store_idx OR t.affilated_center = s.store_idx
        left join
            users_notes as un
        on
            p.idx = un.note_target AND un.note_category = #{noteCategory} /** 220602추가 **/
        left join
			pt_trainer_images as pti
		on
			pti.pt_trainer_idx = ptid.pt_trainer_idx AND pti.main_image_yn = "1" AND pti.image_type = #{imageType} /** 220603 추가 **/
        group by
            p.idx, p.name, p.description, ptid.specialty, p.product_type, p.price, p.discount, p.store_idx, s.store_name, p.seller_idx, t.pt_trainer_name, t.nick_name, s.address, pti.image_path, pti.image_file_name
    </select>

    <select id="getPTLessionVoucharsDetail" resultType="java.util.HashMap">
        select
            p.idx as productIdx,
            p.name as productName,
            p.product_type as productType,
            p.price,
            p.discount,
            p.description,
            p.store_idx as storeIdx,
            s.store_name as storeName,
            p.seller_idx as sellerIdx,
            t.pt_trainer_name as sellerName,
            t.nick_name as sellerNickName, /** 220531추가 **/
            p.registered_date as registeredDate,
            pv.voucher_type as voucherType,
            pv.use_termYN as useTermYN,
            pv.use_term as useTerm,
            avg(un.user_satisfaction) as userSatisfaction /** 220531추가, 220602수정 **/
            /** 사진 정보 추가 예정**/
        from
            product as p
        left join
            pt_trainer_info_basic as t
        on
            p.seller_idx = t.pt_trainer_idx
        left join
            stores_info_basic as s
        on
            p.store_idx = s.store_idx OR t.affilated_center = s.store_idx
        left join
            product_pt_voucher_details as pv
        on
            p.idx = pv.idx
        left join
            users_notes as un
        on
            p.idx = un.note_target AND un.note_category = #{noteCategory}
        where
            p.idx = #{productIdx}
        group by
            p.idx, p.name, p.product_type, p.price, p.discount, p.description, p.store_idx, s.store_name, p.seller_idx, t.pt_trainer_name, t.nick_name, p.registered_date, pv.voucher_type, pv.use_termYN, pv.use_term
    </select>

    <select id="getPTTrainers" resultType="java.util.HashMap">
        select
            p.pt_trainer_idx as PTTrainerIdx,
            p.pt_trainer_name as PTTrainerName,
            p.nick_name as nickName, /** 220531추가 **/
            p.gender,
            p.affilated_center as affilatedCenterIdx,
            s.store_name as affilatedCenterName,
            pti.image_path as imagePath, /** 220603 추가 **/
            pti.image_file_name as imageFileName /** 220603 추가 **/
        from
            pt_trainer_info_basic as p
        left join
            stores_info_basic as s
        on
            p.affilated_center = s.store_idx
        left join
            pt_trainer_info_details as ptid
        on
            p.pt_trainer_idx = ptid.pt_trainer_idx
        left join
			pt_trainer_images as pti
		on
			p.pt_trainer_idx = pti.pt_trainer_idx AND pti.main_image_yn = "1" AND pti.image_type = #{imageType} /** 220603 추가 **/
    </select>

    <select id="getPTTrainerDetail" resultType="java.util.HashMap">
        select
            p.pt_trainer_idx as PTTrainerIdx,
            p.pt_trainer_name as PTTrainerName,
            p.nick_name as nickName, /** 220531추가 **/
            p.gender,
            ROUND((TO_DAYS(NOW()) -  to_days(STR_TO_DATE(p.birth_day, '%Y%m%d'))) / 365 ) as age,
            p.affilated_center as affilatedCenterIdx,
            s.store_name as affilatedCenterName,
            ptid.introduction,
            ptid.specialty, /** 220602추가 **/
            ifnull(ptid.work_experience, 0) as workExperienceCount, /** 220602추가 **/
            ifnull(ptid.award_winning, 0) as awardWinningCount, /** 220602추가 **/
            ifnull(ptid.qualification, 0) as qualificationCount, /** 220602추가 **/
            count(case when pti.pt_trainer_idx = p.pt_trainer_idx then 1 end) as photoCount /** 220602추가 **/
        from
            pt_trainer_info_basic as p
        left join
            stores_info_basic as s
        on
            p.affilated_center = s.store_idx
        left join
            pt_trainer_info_details as ptid
        on
            p.pt_trainer_idx = ptid.pt_trainer_idx
        left join /** 220602추가 **/
            pt_trainer_images as pti
        on
            p.pt_trainer_idx = pti.pt_trainer_idx
        where
            p.pt_trainer_idx = #{PTTrainerIdx}
    </select>

    <select id="getPTTrainerDetail_workExperience" resultType="java.util.HashMap">
        select
            ptwe.start as startDate,
            ptwe.end as endDate,
            ptwe.organization,
            ptwe.role
        from
            pt_trainer_work_experience as ptwe
        where
            ptwe.pt_trainer_idx = #{PTTrainerIdx}
    </select>

    <select id="getPTTrainerDetail_awardWinning" resultType="java.util.HashMap">
        select
            ptaw.year,
            ptaw.competition,
            ptaw.participation,
            ptaw.award_winning as awardWinning
        from
            pt_trainer_award_winning as ptaw
        where
            ptaw.pt_trainer_idx = #{PTTrainerIdx}
    </select>

    <select id="getPTTrainerDetail_qualification" resultType="java.util.HashMap">
        select
            ptq.license_name as licenseName,
            ptq.organization as issuedOrganization,
            ptq.issued_date as issuedDate
        from
            pt_trainer_qualitification as ptq
        where
            ptq.pt_trainer_idx = #{PTTrainerIdx}
    </select>

    <select id="getPTTrainerDetail_photo" resultType="java.util.HashMap">
        select
            pti.iseq as iseq,
            pti.pt_trainer_idx as PTTrainerIdx,
            pti.image_path as imagePath,
            pti.image_file_name as imageFileName,
            pti.main_image_yn as mainImageYN
        from
            pt_trainer_images as pti
        where
            pti.pt_trainer_idx = #{PTTrainerIdx} AND image_type = #{imageType}
    </select>

    <select id="getShoppingItems" resultType="java.util.HashMap">
        select
            usb.product_category as category,
            usb.idx,
            usb.user_idx as userIdx,
            usb.quantity,
            usb.seleted_date as selectedDate,
            usb.product_idx as productIdx,
            p.name as productName,
            p.price,
            p.store_idx as storeIdx,
            sib.store_name as storeName,
            p.seller_idx as sellerIdx,
            ptib.pt_trainer_name as sellerName,
            ptib.nick_name as sellerNickName /** 220531추가 **/
        from users_shopping_basket as usb
        left join product as p on usb.product_idx = p.idx
        left join stores_info_basic as sib on p.store_idx = sib.store_idx
        left join pt_trainer_info_basic as ptib on p.seller_idx = ptib.pt_trainer_idx
        where user_idx = #{userIdx}
    </select>

    <insert id="addShoppingItems">
        insert into users_shopping_basket (user_idx, product_idx, product_category, quantity)
        values (#{userIdx}, #{productIdx}, #{productCategory}, #{quantity})
    </insert>

    <delete id="deleteShoppingItems">
        delete from users_shopping_basket
        where idx = #{usersShoppingBasketIdx}
    </delete>

    <select id="getUserPick_Products" resultType="java.util.HashMap">
        select
            up.item_category as category,
            p.idx as productIdx,
            p.name as productName,
            p.product_type as productType,
            p.price,
            p.discount,
            p.store_idx as storeIdx,
            sib.store_name as storeName,
            p.seller_idx as sellerIdx,
            ptib.pt_trainer_name as sellerName,
            ptib.nick_name as sellerNickName, /** 220531추가 **/
            sib.address /** 220603추가 **/
        from
            users_pick as up
        left join
            product as p
        on
            up.picked_item = p.idx
        left join
            pt_trainer_info_basic as ptib
        on
            p.seller_idx = ptib.pt_trainer_idx
        left join
            stores_info_basic as sib
        on
            p.store_idx = sib.store_idx OR ptib.affilated_center = sib.store_idx
        where
            up.user_idx = #{userIdx} AND up.item_category = #{category}
    </select>

    <select id="getUserPick_PTTrainers" resultType="java.util.HashMap">
        select
            up.item_category as category,
            ptib.pt_trainer_idx as PTTrainerIdx,
            ptib.pt_trainer_name as PTTrainerName,
            ptib.nick_name as nickName, /** 220531추가 **/
            ptib.gender,
            ptib.affilated_center as affilatedCenterIdx,
            sib.store_name as affilatedCenterName,
            pti.image_path as imagePath,
            pti.image_file_name as imageFileName
        from
            users_pick as up
        left join
            pt_trainer_info_basic as ptib
        on
            ptib.pt_trainer_idx = up.picked_item
        left join
            stores_info_basic as sib
        on
            ptib.affilated_center = sib.store_idx
        left join
            pt_trainer_info_details as ptid
        on
            ptib.pt_trainer_idx = ptid.pt_trainer_idx
        left join
			pt_trainer_images as pti
		on
			ptib.pt_trainer_idx = pti.pt_trainer_idx AND pti.main_image_yn = "1" AND pti.image_type = #{imageType} /** 220603 추가 **/
        where
            up.user_idx = #{userIdx} AND up.item_category = #{category}
    </select>

    <select id="getUserPick_Stores" resultType="java.util.HashMap">
        select
            sib.store_idx as storeIdx,
            sib.store_name as storeName,
            sib.main_telephone as mainTelephone,
            sib.address,
            fgsid.main_photo as mainPhoto
        from
            users_pick as up
        left join
            stores_info_basic as sib
        on
            up.picked_item = sib.store_idx
        left join
            fitness_gym_stores_info_details as fgsid
        on
            fgsid.store_idx = sib.store_idx
        where
            up.user_idx = #{userIdx} AND up.item_category = #{category}
    </select>

    <select id="getUsersPickDetail_Product" resultType="java.util.HashMap">
        select
            p.idx as productIdx,
            p.name as productName,
            p.product_type as productType,
            p.price,
            p.discount,
            p.description,
            p.store_idx as storeIdx,
            s.store_name as storeName,
            p.seller_idx as sellerIdx,
            t.pt_trainer_name as sellerName,
            t.nick_name as sellerNickName, /** 220531추가 **/
            p.registered_date as registeredDate,
            pv.voucher_type as voucherType,
            pv.use_termYN as useTermYN,
            pv.use_term as useTerm,
            avg(un.user_satisfaction) as userSatisfaction /** 220531추가, 220602수정 **/
            /** 사진 정보 추가 예정**/
        from
            product as p
        left join
            pt_trainer_info_basic as t
        on
            p.seller_idx = t.pt_trainer_idx
        left join
            stores_info_basic as s
        on
            p.store_idx = s.store_idx OR t.affilated_center = s.store_idx
        left join
            product_pt_voucher_details as pv
        on
            p.idx = pv.idx
        left join
            users_notes as un
        on
            p.idx = un.note_target AND un.note_category = #{noteCategory}
        where
            p.idx = #{pickedItemIdx}
        group by
            p.idx, p.name, p.product_type, p.price, p.discount, p.description, p.store_idx, s.store_name, p.seller_idx, t.pt_trainer_name, t.nick_name, p.registered_date, pv.voucher_type, pv.use_termYN, pv.use_term
    </select>

    <select id="getUsersPickDetail_PTTrainer" resultType="java.util.HashMap">
        select
            p.pt_trainer_idx as PTTrainerIdx,
            p.pt_trainer_name as PTTrainerName,
            p.nick_name as nickName, /** 220531추가 **/
            p.gender,
            ROUND((TO_DAYS(NOW()) -  to_days(STR_TO_DATE(p.birth_day, '%Y%m%d'))) / 365 ) as age,
            p.affilated_center as affilatedCenterIdx,
            s.store_name as affilatedCenterName,
            ptid.introduction,
            ptid.specialty, /** 220602추가 **/
            ifnull(ptid.work_experience, 0) as workExperienceCount, /** 220602추가 **/
            ifnull(ptid.award_winning, 0) as awardWinningCount, /** 220602추가 **/
            ifnull(ptid.qualification, 0) as qualificationCount, /** 220602추가 **/
            count(case when pti.pt_trainer_idx = p.pt_trainer_idx then 1 end) as photoCount /** 220602추가 **/
        from
            pt_trainer_info_basic as p
        left join
            stores_info_basic as s
        on
            p.affilated_center = s.store_idx
        left join
            pt_trainer_info_details as ptid
        on
            p.pt_trainer_idx = ptid.pt_trainer_idx
        left join /** 220602추가 **/
            pt_trainer_images as pti
        on
            p.pt_trainer_idx = pti.pt_trainer_idx
        where
            p.pt_trainer_idx = #{pickedItemIdx}
    </select>

    <select id="getUsersPickDetail_Store" resultType="java.util.HashMap">
        select
            sib.store_idx as storeIdx,
            sib.store_name as storeName,
            sib.main_telephone as mainTelephone,
            sib.address,
            fgsid.main_photo as mainPhoto,
            fgsid.use_guide as useGuide,
            ifnull(fgsid.biz_hour, 0) as bizHour,
            fgsid.introduction,
            ifnull(fgsid.programs, 0) as programs
        from
            stores_info_basic as sib
        left join
            fitness_gym_stores_info_details as fgsid
        on
            fgsid.store_idx = sib.store_idx
        where
            sib.store_idx = #{pickedItemIdx}
    </select>

    <select id="getStoreBizHours" resultType="java.util.HashMap">
        select
            fgsbh.iseq as iseq,
            fgsbh.store_idx as storeIdx,
            fgsbh.title,
            fgsbh.day_classification as dayClassification,
            fgsbh.open_time as openTime,
            fgsbh.close_time as closeTime
        from
            fitness_gym_stores_biz_hour as fgsbh
        where
            fgsbh.store_idx = #{pickedItemIdx}
    </select>

    <select id="getStorePrograms" resultType="java.util.HashMap">
        select
            fgsp.iseq as iseq,
            fgsp.store_idx as storeIdx,
            fgsp.program_name as programName,
            fgsp.description,
            fgsp.charge
        from
            fitness_gym_stores_program as fgsp
        where
            fgsp.store_idx = #{pickedItemIdx}
    </select>

    <insert id="addUserPick">
        insert into users_pick (user_idx, item_category, picked_item)
        values (#{userIdx}, #{category}, #{pickedItemIdx})
    </insert>

    <delete id="deleteUserPick">
        delete from users_pick
        where idx = #{usersPicksIdx}
    </delete>

    <insert id="insertTransaction">
        <selectKey resultType="int" keyProperty="transactionIdx" order="BEFORE">
            SELECT MAX(idx)+1 from transactions
        </selectKey>
        insert into
            transactions(consumer_idx, kind_of_items, total_amount, point_use, billing_amount, billing_method)
        values
        (#{userIdx}, #{kindOfItem}, #{totalAmount}, #{pointUse}, #{billingAmount}, #{billingMethod})
    </insert>

    <insert id="insertTransactionDetail">
        insert into
            transactions_details(transaction_idx, product_category, product_idx, price, quantity, amount, seller_idx, store_idx)
        values (#{transactionIdx}, #{productCategory}, #{productIdx}, #{price}, #{quantity}, #{amount}, #{sellerIdx, jdbcType=INTEGER}, #{storeIdx, jdbcType=INTEGER})
    </insert>

    <select id="getTransactions" resultType="java.util.HashMap">
        select
            t.idx as transactionIdx,
            p.idx as productIdx,
            p.name as productName,
            t.transaction_date as transactionDate,
            p.product_type as productType,
            p.seller_idx as sellerIdx,
            p.store_idx as storeIdx,
            t.billing_date as billingDate,
            t.billing_method as billingMethod,
            t.billingyn as billingYN, /** 결제 여부 220531 추가 **/
            t.cancelyn as cancelYN /** 취소 여부 220531 추가 **/
        from
            transactions as t
        left join
            transactions_details as td
        on
            t.idx = td.transaction_idx
        left join
            product as p
        on
            p.idx = td.product_idx
        where
            consumer_idx = #{userIdx}
    </select>

    <select id="getTransactionDetail" resultType="java.util.HashMap">
        select
            t.total_amount as totalAmount,
            t.point_use as pointUse,
            t.billing_amount as billingAmount,
            t.billing_method as billingMethod,
            t.kind_of_items as kindOfItems,
            t.billingyn as billingYN,
            t.cancelyn as cancelYN
        from
            transactions as t
        where
            t.idx = #{transactionIdx}
    </select>

    <select id="getTransactionDetail_product" resultType="java.util.HashMap">
        select
            p.idx as productIdx,
            p.name as productName,
            ptib.pt_trainer_name as sellerName,
            ptib.nick_name as sellerNickName,
            sib.store_name as storeName,
            td.price,
            td.quantity,
            td.amount
        from
            transactions_details as td
        left join
            product as p
        on
            td.product_idx = p.idx
        left join
            pt_trainer_info_basic as ptib
        on
            ptib.pt_trainer_idx = p.seller_idx
        left join
            stores_info_basic as sib
        on
            sib.store_idx = p.store_idx OR ptib.affilated_center = sib.store_idx
        where
            td.transaction_idx = #{transactionIdx}
    </select>

    <select id="getCancelYN" resultType="String">
        select
            cancelyn
        from
            transactions
        where
            idx = #{transactionIdx}
    </select>

    <update id="updateCancel" parameterType="java.util.HashMap">
        update transactions
        set cancelyn = "1", cancel_date = now()
        where idx = #{transactionIdx}
    </update>

    <select id="getBillingYN" resultType="String">
        select
            billingyn
        from
            transactions
        where
            idx = #{transactionIdx}
    </select>

    <update id="updateRefund" parameterType="java.util.HashMap">
        update transactions
        set refundyn = "1", refund_date = now()
        where idx = #{transactionIdx}
    </update>
    
    <select id="getTransactionIdx" resultType="java.util.HashMap">
        select distinct transaction_idx as transactionIdx
        from transactions_details
        where seller_idx = #{trainerIdx}
    </select>

    <select id="getConsumerIdx" resultType="String">
        select
            consumer_idx as consumerIdx
        from
            transactions as t
        where
            t.idx = #{transactionIdx} AND billingyn = "1" AND cancelyn = "0"
    </select>

    <insert id="addUserPTRecords">
        <selectKey resultType="int" keyProperty="recordIdx" order="AFTER">
            SELECT MAX(idx) from users_pt_records
        </selectKey>
        insert into users_pt_records(user_idx, date, exercise_count, recorded_by)
        values (#{userIdx}, #{date}, #{exerciseCount}, "0")
    </insert>
    
    <insert id="addUserPTContents">
        insert into user_pt_contents(record_idx, exercise_type, exercise_name, exercise_details)
        values (#{recordIdx}, #{exerciseType}, #{exerciseName}, #{exerciseDetails})
    </insert>

    <select id="getUserPTRecords" resultType="java.util.HashMap">
    select
        upr.idx,
        upr.date,
        upr.exercise_count as exerciseCount,
        upc.exercise_type as exerciseType,
        upc.exercise_name as exerciseName,
        upc.exercise_details as exerciseDetails
    from
        users_pt_records as upr
    left join
        user_pt_contents as upc
    on
        upr.idx = upc.record_idx
    where
        upr.user_idx = #{userIdx} and upr.recorded_by = "0"
    </select>

    <select id="getUserPTRecordsWithTrainer" resultType="java.util.HashMap">
        select
            upr.idx,
            upr.pt_trainer_idx as PTTrainerIdx,
            ptib.pt_trainer_name as PTTrainerName,
            ptib.nick_name as nickName,
            upr.date,
            upr.start_time as startTime,
            upr.end_time as endTime,
            upr.exercise_count as exerciseCount,
            upc.exercise_type as exerciseType,
            upc.exercise_name as exerciseName,
            upc.exercise_details as exerciseDetails
        from
            users_pt_records as upr
        left join
            user_pt_contents as upc
        on
            upr.idx = upc.record_idx
        left join
            pt_trainer_info_basic as ptib
        on
            upr.pt_trainer_idx = ptib.pt_trainer_idx
        where
            upr.user_idx = #{userIdx} and upr.recorded_by = "1"
    </select>

    <select id="checkId" resultType="java.util.HashMap">
        select id
        from users
        where id = #{email}
    </select>

    <insert id="registerUser">
        <selectKey resultType="int" keyProperty="userIdx" order="AFTER">
            SELECT MAX(idx) from users
        </selectKey>
        insert into users(id)
        values (#{email})
    </insert>

    <insert id="registerUser_authentication">
        insert into users_authentication(user_idx, cert_type, password)
        values (#{userIdx}, #{certType}, #{password})
    </insert>

    <insert id="registerUser_info">
        insert into
            users_info(
                user_idx,
                user_name,
                nick_name,
                birth_day,
                gender,
                eldas,
                registered_date,
                region,
                local_area,
                telephone,
                marketingyn,
                numof_interest)
        values (
                #{userIdx},
                #{name},
                #{nickName},
                #{birthYYYYMMDD},
                #{gender},
                #{elDas},
                now(),
                #{region},
                #{localArea},
                #{telephone},
                #{marketingYN},
                "0")
    </insert>

    <update id="setNumOfInterest" parameterType="java.util.HashMap">
        update users_info
        set numof_interest = #{numOfInterest}
        where user_idx = #{userIdx}
    </update>

    <insert id="setInterests">
        insert into users_interests(user_idx, interest_code)
        values (#{userIdx}, #{interestCode})
    </insert>

    <select id="getInterestsCount" resultType="INTEGER">
        select count(interest_code)
        from users_interests
        where user_idx = #{userIdx}
    </select>

    <select id="getInterestCode" resultType="java.util.HashMap">
        select interest_code
        from users_interests
        where user_idx = #{userIdx} AND interest_code = #{interestCode}
    </select>

    <delete id="delInterestCode">
        delete from users_interests
        where user_idx = #{userIdx} AND NOT interest_code IN
        <foreach collection="interests" item="item" open="(" close=")" separator=",">
            #{item.interestCode}
        </foreach>
    </delete>
</mapper>